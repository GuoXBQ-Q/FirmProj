输入json格式的数据，包含了某jimple method的信息，结构是：
"""
{待分析method名:{
"Parameters"(待分析method参数值):[[parameter0值],[parameter1值],...],
"Related Methods"(其他相关method):{"method1":"jimple代码","method2":"jimple代码",...},
"Body"(待分析method的主体代码):"jimple代码"
}
}
"""
上述结构中注意，若parameter值以$INVOKE开头则表示此parameter值来自$INVOKE后面函数调用的返回值。Related Methods仅作为参考信息，了解Method中调用的其他函数的逻辑，其排列顺序与函数的执行顺序无关。
请你根据以上信息，做以下操作：
询问的method是与http client相关的函数，包括retrofit2、okhttp3中使用的callFactory、interceptor、converterfactory等。
请根据相关库函数的特性，理解待分析method中采取的操作，主要关注其对于http交互过程中参数的修改。例如对于url、header等内容的修改。
在回答中，按照method的执行顺序，尽可能直观、简单的给出method对于http消息参数中进行了哪些修改，添加或者删除了哪些内容。注意，忽略输出日志、异常处理等不影响method返回值的操作，只关注影响返回内容的操作。注意使用中文回答！
下面是一个问答的实例：
问：
{"<com.ruochan.dabai.netcore.encrypt.B.CustomRequestBodyConverter: okhttp3.RequestBody convert(java.lang.Object)>": {
    "Parameters": [["requestBody"]],
    "Related Methods": {"<com.ruochan.utils.CXAESUtil: java.lang.String Encrypt(java.lang.String,java.lang.String,java.lang.String)>": "$r0 := @parameter0: java.lang.String; $r1 := @parameter1: java.lang.String; $r2 := @parameter2: java.lang.String; if $r1 != null goto $i0 = virtualinvoke $r1.<java.lang.String: int length()>(); staticinvoke <com.ruochan.log.LgUtil: void e(java.lang.String,java.lang.String)>(\"CXAESUtil\", \"Encrypt:Key\\u4e3a\\u7a7anull\"); return null; $i0 = virtualinvoke $r1.<java.lang.String: int length()>(); if $i0 == 16 goto $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>(\"utf-8\"); staticinvoke <com.ruochan.log.LgUtil: void e(java.lang.String,java.lang.String)>(\"CXAESUtil\", \"Encrypt:Key\\u957f\\u5ea6\\u4e0d\\u662f16\\u4f4d\"); return null; $r4 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>(\"utf-8\"); $r5 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>(\"utf-8\"); r3 = new javax.crypto.spec.SecretKeySpec; specialinvoke r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, \"AES\"); r6 = new javax.crypto.spec.IvParameterSpec; specialinvoke r6.<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>($r5, 0, 16); $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>(\"AES/CBC/PKCS5Padding\"); virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, r3, r6); $r4 = virtualinvoke $r0.<java.lang.String: byte[] getBytes(java.lang.String)>(\"utf-8\"); $r4 = virtualinvoke $r7.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r4); $r0 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r4, 2); return $r0;"},
    "Body": "r0 := @this: com.ruochan.dabai.netcore.encrypt.B.CustomRequestBodyConverter; r1 := @parameter0: java.lang.Object; r2 = r0.<com.ruochan.dabai.netcore.encrypt.B.CustomRequestBodyConverter: com.google.gson.Gson gson>; $r3 = virtualinvoke r2.<com.google.gson.Gson: java.lang.String toJson(java.lang.Object)>(r1); r4 = new java.lang.StringBuilder; specialinvoke r4.<java.lang.StringBuilder: void <init>()>(); virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(\"\\u53d1\\u9001\\u660e\\u6587:\"); virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3); $r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>(); staticinvoke <com.ruochan.log.LgUtil: void e(java.lang.String,java.lang.String)>(\"CustomRequestBody\", $r5); r6 = new org.json.JSONObject; specialinvoke r6.<org.json.JSONObject: void <init>()>(); $r3 = staticinvoke <com.ruochan.utils.CXAESUtil: java.lang.String Encrypt(java.lang.String,java.lang.String,java.lang.String)>($r3, \"noasdh2kasdi295i\", \"4982950295038275\"); virtualinvoke r6.<org.json.JSONObject: org.json.JSONObject putOpt(java.lang.String,java.lang.Object)>(\"data\", $r3); goto [?= r9 = <com.ruochan.dabai.netcore.encrypt.B.CustomRequestBodyConverter: okhttp3.MediaType MEDIA_TYPE>]; r7 := @caughtexception; virtualinvoke r7.<java.lang.Exception: void printStackTrace()>(); goto [?= r9 = <com.ruochan.dabai.netcore.encrypt.B.CustomRequestBodyConverter: okhttp3.MediaType MEDIA_TYPE>]; r8 := @caughtexception; virtualinvoke r8.<org.json.JSONException: void printStackTrace()>(); r9 = <com.ruochan.dabai.netcore.encrypt.B.CustomRequestBodyConverter: okhttp3.MediaType MEDIA_TYPE>; $r3 = virtualinvoke r6.<org.json.JSONObject: java.lang.String toString()>(); $r10 = staticinvoke <okhttp3.RequestBody: okhttp3.RequestBody create(okhttp3.MediaType,java.lang.String)>(r9, $r3); return $r10;"
}}
答：
convert调用Encrypt函数，对requestBody进行了加密及编码操作，其中
加密算法使用AES/CBC/PKCS5Padding模式
加密内容为okhttp发送的requestBody，密钥为硬编码的字符串"noasdh2kasdi295i", IV为硬编码的字符串"4982950295038275"
这三项内容均经采用utf-8调用getBytes得到字节内容。
加密完成后，采用Base64的encodeToString方法对加密后内容进行标准的base64编码，随后返回。
得到返回值后，在jsonobject中添加data字段，值为加密返回值。随后创建为新的requestBody。